---
import type { TestData } from '../util/data-schema';

interface Props {
	data: TestData;
	href?: string;
}

const { data, href = data.url } = Astro.props;

const displayURL = (url: string | undefined) => url?.replace(/^https?:\/\//, '');
const hasRedirect = data.requestedUrl && data.requestedUrl !== data.url;
const randomBuildID = Math.round(Date.now() / 60_000);
---

<td class="leaderboard-url">
	<a {href}>
		<img
			src={`https://v1.indieweb-avatar.11ty.dev/${encodeURIComponent(data.url + '?bust=' + randomBuildID)}`}
			alt={`IndieWeb Avatar for ${displayURL(data.url)}`}
			class="leaderboard-list-entry-thumbnail"
			loading="lazy"
			decoding="async"
			width="150"
			height="150"
		/>
		<code class="url">{displayURL(data.url)}</code>
	</a>
	{
		hasRedirect && (
			<span class="leaderboard-redirect-warn">
				Redirect from <code class="url">{displayURL(data.requestedUrl)}</code>
			</span>
		)
	}
</td>

<style>
	.leaderboard-url {
		width: 100%;
	}
	.leaderboard-url a[href] {
		display: flex;
	}
	.url {
		word-break: break-word;
	}
	@media (min-width: 37.5em) {
		.url {
			font-size: 1.25em;
		}
	}

	.leaderboard-list-entry-thumbnail {
		width: 1.5em;
		height: 1.5em;
		margin-right: 0.5em;
		padding: 0.25em;
		vertical-align: middle;
		border: none;
		border-radius: 0.2em;
		background-color: hsla(290, 100%, 85%, 0.36);
	}

	.leaderboard-redirect-warn {
		text-transform: uppercase;
		font-size: 0.75em;
		font-weight: 400;
		margin-left: 1rem;
	}
	.leaderboard-redirect-warn {
		color: hsl(58, 100%, 71%);
	}
	.leaderboard-redirect-warn::before {
		content: '⚠️ ';
	}
	.leaderboard-redirect-warn code {
		text-transform: none;
	}
</style>
